---
# install_comfyui.yml
- name: Instalar y configurar ComfyUI
  hosts: empty_vms
  vars:
    # Variables de sistema y CUDA
    os_version: "2204"        # Ejemplo: 2004, 2204, 2404
    os_arch: "x86_64"
    cuda_keyring_version: "1.1-1"
    cuda_version: "12.4"
    pytorch_cuda_version: "12.1"
    
    # Variables de instalación
    base_path: "/home/superreal"
    comfy_path: "{{ base_path }}/ComfyUI"
    models_path: "{{ comfy_path }}/models"
    conda_path: "{{ base_path }}/miniconda3"
    conda_env_name: "comfyenv"
    python_version: "3.10"
    service_user: "superreal"
    gpu_memory: "16"

    # Variables calculadas
    cuda_repo_url: "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu{{ os_version }}/{{ os_arch }}"

  pre_tasks:
    - name: Verificar sistema y mostrar configuración
      ansible.builtin.debug:
        msg: |
          Sistema detectado:
          Distribution: {{ ansible_distribution }}
          Version: {{ ansible_distribution_version }}
          
          Configuración:
          OS Version: {{ os_version }}
          CUDA Version: {{ cuda_version }}
          CUDA Repository: {{ cuda_repo_url }}
          Python Version: {{ python_version }}
          PyTorch CUDA: {{ pytorch_cuda_version }}

    - name: Verificar que el sistema es Ubuntu
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Ubuntu"
        msg: "Este playbook requiere Ubuntu"

  tasks:
    # Verificaciones previas
    - name: Verificar si ya existe una instalación
      ansible.builtin.stat:
        path: "{{ comfy_path }}"
      register: comfy_dir

    - name: Detener si ya existe instalación
      ansible.builtin.fail:
        msg: "Ya existe una instalación en {{ comfy_path }}"
      when: comfy_dir.stat.exists

    # Preparación del sistema
    - name: Actualizar cache de apt y sistema
      ansible.builtin.apt:
        update_cache: yes
        upgrade: yes
      become: yes

    - name: Instalar dependencias del sistema
      ansible.builtin.apt:
        name:
          - wget
          - git
          - libgl1
          - libglib2.0-0
          - ubuntu-drivers-common
        state: present
      become: yes

    # Instalación de drivers NVIDIA
    - name: Instalar drivers NVIDIA
      ansible.builtin.command:
        cmd: ubuntu-drivers autoinstall
      become: yes

    # Instalación de CUDA
    - name: Descargar CUDA keyring
      ansible.builtin.get_url:
        url: "{{ cuda_repo_url }}/cuda-keyring_{{ cuda_keyring_version }}_all.deb"
        dest: /tmp/cuda-keyring.deb
      register: cuda_keyring_download
      ignore_errors: yes

    - name: Mostrar error si falla la descarga del keyring
      ansible.builtin.fail:
        msg: |
          Error al descargar CUDA keyring.
          URL: {{ cuda_repo_url }}/cuda-keyring_{{ cuda_keyring_version }}_all.deb
          Verifica:
          - Versión Ubuntu ({{ os_version }})
          - Versión keyring ({{ cuda_keyring_version }})
          - URL repositorio ({{ cuda_repo_url }})
      when: cuda_keyring_download is failed

    - name: Instalar CUDA keyring
      ansible.builtin.apt:
        deb: /tmp/cuda-keyring.deb
      become: yes

    - name: Instalar CUDA Toolkit
      ansible.builtin.apt:
        name: "cuda-toolkit-{{ cuda_version | replace('.', '-') }}"
        state: present
        update_cache: yes
      become: yes

    # Instalación y configuración de Miniconda
    - name: Descargar Miniconda
      ansible.builtin.get_url:
        url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        dest: /tmp/miniconda.sh
        mode: '0755'
      when: not ansible.builtin.stat(conda_path).exists

    - name: Instalar Miniconda
      ansible.builtin.command:
        cmd: "bash /tmp/miniconda.sh -b -u -p {{ conda_path }}"
        creates: "{{ conda_path }}"

    - name: Inicializar Conda
      ansible.builtin.shell:
        cmd: "{{ conda_path }}/bin/conda init bash"
        executable: /bin/bash

    # Crear y configurar entorno Conda
    - name: Crear entorno Conda
      ansible.builtin.command:
        cmd: "{{ conda_path }}/bin/conda create -y -n {{ conda_env_name }} python={{ python_version }}"
        creates: "{{ conda_path }}/envs/{{ conda_env_name }}"

    - name: Instalar PyTorch con CUDA
      ansible.builtin.shell:
        cmd: |
          source {{ conda_path }}/bin/activate {{ conda_env_name }}
          conda install -y pytorch torchvision torchaudio pytorch-cuda={{ pytorch_cuda_version }} -c pytorch -c nvidia
        executable: /bin/bash

    # Estructura de directorios
    - name: Crear directorios necesarios
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ service_user }}"
        mode: '0755'
      loop:
        - "{{ comfy_path }}"
        - "{{ models_path }}"
        - "{{ models_path }}/checkpoints"
        - "{{ models_path }}/clip"
        - "{{ models_path }}/controlnet"
        - "{{ models_path }}/diffusers"
        - "{{ models_path }}/embeddings"
        - "{{ models_path }}/faces"
        - "{{ models_path }}/ipadapter"
        - "{{ models_path }}/loras"
        - "{{ models_path }}/upscale_models"
        - "{{ models_path }}/vae"
        - "{{ comfy_path }}/custom_nodes"
        - "{{ comfy_path }}/output"

    # Instalación de ComfyUI
    - name: Clonar ComfyUI
      ansible.builtin.git:
        repo: https://github.com/comfyanonymous/ComfyUI.git
        dest: "{{ comfy_path }}"
        version: master

    - name: Instalar requisitos de ComfyUI
      ansible.builtin.shell:
        cmd: |
          source {{ conda_path }}/bin/activate {{ conda_env_name }}
          pip install -r requirements.txt
        args:
          chdir: "{{ comfy_path }}"

    # Configuración
    - name: Crear configuración de ComfyUI
      ansible.builtin.copy:
        content: |
          extra_model_paths:
            - path: {{ models_path }}
              folder_paths_cfg:
                checkpoints: checkpoints
                clip: clip
                clip_vision: clip_vision
                configs: configs
                controlnet: controlnet
                embeddings: embeddings
                loras: loras
                stereoscopic_models: stereoscopic_models
                upscale_models: upscale_models
                vae: vae
          virtual_memory: {{ gpu_memory }}
        dest: "{{ comfy_path }}/extra_model_paths.yaml"

    # Servicio
    - name: Crear script de inicio
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          source {{ conda_path }}/bin/activate {{ conda_env_name }}
          python {{ comfy_path }}/main.py --listen 0.0.0.0 --port 8188
        dest: "{{ comfy_path }}/start.sh"
        mode: '0755'
        owner: "{{ service_user }}"

    - name: Crear servicio ComfyUI
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=ComfyUI Service
          After=network.target

          [Service]
          Type=simple
          User={{ service_user }}
          Group={{ service_user }}
          WorkingDirectory={{ comfy_path }}
          ExecStart={{ comfy_path }}/start.sh
          Restart=always
          RestartSec=10s

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/comfyui.service
      become: yes

    # Activar servicio
    - name: Recargar systemd
      ansible.builtin.systemd:
        daemon_reload: yes
      become: yes

    - name: Habilitar y arrancar ComfyUI
      ansible.builtin.systemd:
        name: comfyui
        enabled: yes
        state: started
      become: yes

    # Verificación final
    - name: Esperar a que el servicio esté disponible
      ansible.builtin.wait_for:
        port: 8188
        timeout: 60

    - name: Verificar que ComfyUI responde
      ansible.builtin.uri:
        url: http://localhost:8188
        method: GET
      register: comfy_check

    - name: Mostrar resumen de la instalación
      ansible.builtin.debug:
        msg: |
          Instalación de ComfyUI completada en {{ inventory_hostname }}:
          
          Sistema:
          - Ubuntu {{ ansible_distribution_version }}
          - CUDA {{ cuda_version }}
          
          Configuración:
          - Python {{ python_version }}
          - VRAM: {{ gpu_memory }}GB
          - Conda env: {{ conda_env_name }}
          
          Directorios:
          - ComfyUI: {{ comfy_path }}
          - Modelos: {{ models_path }}
          
          Estado: {{ 'OK' if comfy_check is success else 'ERROR' }}
          
          Próximos pasos:
          1. Agregar modelos en {{ models_path }}
          2. Verificar logs: journalctl -u comfyui.service
