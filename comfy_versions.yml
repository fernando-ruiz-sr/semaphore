- name: Auditar ComfyUI en cada m치quina y mostrar discrepancias
  hosts: comfyui_vms
  tasks:
    - name: Verificar la versi칩n de ComfyUI
      ansible.builtin.command:
        cmd: "git describe --tags"
        chdir: "/home/superreal/ComfyUI"
      register: comfyui_version

    - name: Mostrar la versi칩n de ComfyUI
      ansible.builtin.debug:
        var: comfyui_version.stdout

    - name: Listar todos los archivos en la carpeta models
      ansible.builtin.find:
        paths: "/home/superreal/ComfyUI/models"
        recurse: yes
      register: model_files

    - name: Crear set consolidado de todos los modelos existentes
      ansible.builtin.set_fact:
        all_models: "{{ ansible_play_hosts | map('extract', hostvars) | map(attribute='model_files') | map(attribute='files') | map('map', attribute='path') | flatten | unique | list }}"

    - name: Encontrar modelos faltantes en cada host
      ansible.builtin.set_fact:
        missing_models: "{{ all_models | difference(model_files.files | map(attribute='path') | list) }}"

    - name: Mostrar modelos faltantes
      ansible.builtin.debug:
        msg: |
          Modelos faltantes en {{ inventory_hostname }}:
          {% for model in missing_models %}
          - {{ model }}
          {% endfor %}
      when: missing_models | length > 0

    - name: Listar las carpetas en custom_nodes
      ansible.builtin.find:
        paths: "/home/superreal/ComfyUI/custom_nodes"
        recurse: no
        file_type: directory
      register: custom_node_dirs

    - name: Obtener los repositorios de git en las carpetas de custom_nodes
      ansible.builtin.command:
        cmd: "git config --get remote.origin.url"
        chdir: "{{ item.path }}"
      with_items: "{{ custom_node_dirs.files }}"
      register: custom_node_repos
      ignore_errors: yes

    - name: Crear lista de repos v치lidos
      ansible.builtin.set_fact:
        valid_repos: "{{ custom_node_repos.results | selectattr('rc', 'defined') | selectattr('rc', 'eq', 0) | map(attribute='stdout') | list }}"

    - name: Crear set consolidado de todos los nodos existentes
      ansible.builtin.set_fact:
        all_nodes: "{{ ansible_play_hosts | map('extract', hostvars) | map(attribute='valid_repos') | flatten | unique | list }}"

    - name: Encontrar nodos faltantes en cada host
      ansible.builtin.set_fact:
        missing_nodes: "{{ all_nodes | difference(valid_repos) }}"

    - name: Mostrar nodos faltantes
      ansible.builtin.debug:
        msg: |
          Nodos faltantes en {{ inventory_hostname }}:
          {% for node in missing_nodes %}
          - {{ node }}
          {% endfor %}
      when: missing_nodes | length > 0
